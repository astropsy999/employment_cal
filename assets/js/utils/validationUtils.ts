import { Methods } from "../enums/methods";
import { sumUneditedMethodsTime } from "./methodsUtils";
import { isInvalidElem } from "./toggleElem";

export const validateCondition = (
    valC: boolean | 'onRoad',
    locations: HTMLSelectElement,
    kindOfTasks: HTMLSelectElement,
    eventEndDate: HTMLInputElement
  ): boolean => {
    switch (valC) {
      case false:
        return false;
      case true:
        return (
          locations.value === '–ù–µ –≤—ã–±—Ä–∞–Ω–æ' ||
          kindOfTasks.value === '–ù–µ –≤—ã–±—Ä–∞–Ω–æ' ||
          eventEndDate.classList.contains('is-invalid')
        );
      case 'onRoad':
        return eventEndDate.classList.contains('is-invalid');
      default:
        return false;
    }
  };

 /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
     * @returns boolean
     */
 export const checkEmploymentMode = (locations: HTMLSelectElement): boolean | 'onRoad' => {
    const emplMode = document.querySelector('#employment') as HTMLSelectElement;
    if (emplMode.value === '–†–∞–±–æ—Ç–∞' && locations.value !== '–í –¥–æ—Ä–æ–≥–µ') {
      return true;
    } else if (
      emplMode.value === '–†–∞–±–æ—Ç–∞' &&
      locations.value === '–í –¥–æ—Ä–æ–≥–µ'
    ) {
      return 'onRoad';
    }
    return false;
  };

  /**
   * –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –±—Ä–∏–≥–∞–¥—ã
   * @param brigadeSelect 
   * @returns 
   */
  export function validateBrigadeSelect(brigadeSelect: HTMLSelectElement): boolean {
    if (brigadeSelect) {
      const selectedOptions = brigadeSelect.selectedOptions;
  
      if (selectedOptions.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –±—Ä–∏–≥–∞–¥—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        brigadeSelect.classList.add('is-invalid');
  
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        let errorElem = brigadeSelect.parentElement?.querySelector('.invalid-feedback');
        if (!errorElem) {
          // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
          errorElem = document.createElement('div');
          errorElem.classList.add('invalid-feedback');
          errorElem.textContent = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –±—Ä–∏–≥–∞–¥—ã.';
          brigadeSelect.parentElement?.appendChild(errorElem);
        }
  
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
        brigadeSelect.addEventListener('change', () => {
          if (brigadeSelect.selectedOptions.length > 0) {
            brigadeSelect.classList.remove('is-invalid');
            const errorElem = brigadeSelect.parentElement?.querySelector('.invalid-feedback');
            if (errorElem) {
              errorElem.remove();
            }
          }
        });
  
        return false; // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
      } else {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –±—Ä–∏–≥–∞–¥—ã, —É–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        brigadeSelect.classList.remove('is-invalid');
        const errorElem = brigadeSelect.parentElement?.querySelector('.invalid-feedback');
        if (errorElem) {
          errorElem.remove();
        }
      }
    }
  
    return true; // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –±—Ä–∏–≥–∞–¥—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   * @param editedString 
   * @param editedMethodName 
   * @returns 
   */
export function validateBrigadeSelectionOnEdit(editedString: HTMLTableRowElement, editedMethodName: string): boolean {
    const isRK =
      editedMethodName === Methods.RK_CRG_NAME || editedMethodName === Methods.RK_CLASSIC_NAME;

    if (isRK) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –±—Ä–∏–≥–∞–¥—ã
      const brigadeSelect = editedString.querySelector('#brigadeSelectEdit') as HTMLSelectElement;
      console.log("üöÄ ~ validateBrigadeSelectionOnEdit ~ brigadeSelect:", brigadeSelect)
  
      if (brigadeSelect) {
        return validateBrigadeSelect(brigadeSelect);
      }
    }
  
    // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –±—Ä–∏–≥–∞–¥—É –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞
    return true;
  }
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param editedString 
   * @returns 
   */
  export function validateTimeFieldOnEdit(editedString: HTMLTableRowElement): boolean {
    // –ù–∞—Ö–æ–¥–∏–º —è—á–µ–π–∫—É —Å –ø–æ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏
    const timeTd = editedString.querySelector('.wootime') as HTMLTableCellElement;
    let tBody = document.querySelector('.methods-tbody') as HTMLElement;
    const editedSpentTime = document.querySelector('#eventEditSpentTime') as HTMLInputElement;
    if (!timeTd) {
      // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
      return false;
    }
  
    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
    const timeInput = timeTd.querySelector('input') as HTMLInputElement;
    if (!timeInput) {
      // –ï—Å–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
      return false;
    }
  
    const timeValue = timeInput.value.trim();
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ —Ä–∞–≤–Ω–æ –Ω—É–ª—é
    if (timeValue === '' || parseFloat(timeValue) <= 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞
      timeInput.classList.add('is-invalid');
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      let errorElem = timeTd.querySelector('.invalid-feedback');
      if (!errorElem) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        errorElem = document.createElement('div');
        errorElem.classList.add('invalid-feedback');
        errorElem.textContent = '–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é.';
        timeTd.appendChild(errorElem);
      }
  
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ
      timeInput.addEventListener('input', () => {
        if (timeInput.value.trim() !== '' && parseFloat(timeInput.value.trim()) > 0) {
          timeInput.classList.remove('is-invalid');
          if (errorElem) {
            errorElem.remove();
          }
        }
      });
  
      return false; // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
    
    } else {
      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
      timeInput.classList.remove('is-invalid');
      const errorElem = timeTd.querySelector('.invalid-feedback');
      if (errorElem) {
        errorElem.remove();
      }
    }
  
    return true; // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param editedString 
   * @returns
   */
  

  export const validateTotalTimeFieldOnEdit = (methodsTbody: HTMLElement, editedSpentTime: HTMLInputElement, editSaveTaskBtn: HTMLButtonElement): boolean => {
    const allMethodsTimeSum = Number(sumUneditedMethodsTime(methodsTbody));
    const editedSpentTimeValue = Number(editedSpentTime?.value.trim());

    const editedMethodTime = Array.from(document.querySelectorAll('.wootime'));
    const editedMethodTimeInput = editedMethodTime.filter((el) => el.querySelector('input'))[0] as HTMLInputElement;

    const editedMethodTimeValue = Number(editedMethodTimeInput.textContent);

    if ((allMethodsTimeSum + editedMethodTimeValue) > editedSpentTimeValue) {
      isInvalidElem(editedSpentTime);

      const timeHeader = document.querySelector(
        'th[scope="col"]:nth-of-type(2)',
      ) as HTMLTableCellElement;
      timeHeader.textContent = `–û–±—â–µ–µ –≤—Ä–µ–º—è –º–µ—Ç–æ–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å > ${editedSpentTimeValue}—á`;
      timeHeader.style.border = '2px solid red';
      timeHeader.style.color = 'red';
      // editSaveTaskBtn?.setAttribute('disabled', 'disabled');

      return false;
    }
    return true
  }
  