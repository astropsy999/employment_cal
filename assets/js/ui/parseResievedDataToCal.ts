import _ from 'lodash';
import { EventInfo } from '../types/events';
import { MethodsArr } from '../types/methods';
/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
 * @param {*} data
 * @returns
 */
export const parseResievedDataToCal = (data: string[]) => {
  const events: EventInfo[] = [];
  const parentIdDataArr: {[key: string]: string}[] = [];
  let methodsArr: MethodsArr[] = [];
  let eventMethodsArr: EventInfo[] = [];
  const isLockedArray: string[] = [];

  data.forEach((item, idx) => {
    // –û–±—Ö–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –ø–∞—Ä—Å–∏–º –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —è—á–µ–π–∫–∞—Ö

    const parser = new DOMParser();
    const htmItem = parser.parseFromString(
      `<table>${item}</table>`,
      'text/html',
    );

    //ParentID
    const parID = htmItem?.querySelector('.c_i-1')?.getAttribute('o');
    // –î–∞—Ç–∞
    const date = htmItem?.querySelector('.c_i-1')?.textContent;
    // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const shortDescription = htmItem?.querySelector('.c_i-4')?.textContent;
    // –û–±—ä–µ–∫—Ç
    const object = htmItem?.querySelector('.c_i-5')?.textContent;
    // –í–∏–¥ —Ä–∞–±–æ—Ç
    const taskType = htmItem?.querySelector('.c_i-6')?.textContent;
    // –ü–æ–¥–≤–∏–¥ —Ä–∞–±–æ—Ç
    const subTaskType = htmItem?.querySelector('.c_i-7')?.textContent;
    // –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const fullDescription = htmItem?.querySelector('.c_i-8')?.textContent;
    // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    const factTime = htmItem?.querySelector('.c_i-9')?.textContent;
    // –ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫
    const director = htmItem?.querySelector('.c_i-10')?.textContent;
    // –ò—Å—Ç–æ—á–Ω–∏–∫
    const source = htmItem?.querySelector('.c_i-11')?.textContent;
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
    const notes = htmItem?.querySelector('.c_i-12')?.textContent;
    // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    const startDateTime = htmItem?.querySelector('.c_i-13')?.textContent;
    // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const endDateTime = htmItem?.querySelector('.c_i-14')?.textContent;
    // –õ–æ–∫–∞—Ü–∏—è
    const location = htmItem?.querySelector('.c_i-15')?.textContent;
    // –ú–µ—Ç–æ–¥
    const method = htmItem?.querySelector('.c_i-16')?.textContent;
    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const duration = htmItem?.querySelector('.c_i-17')?.textContent;
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
    const objQuant = htmItem?.querySelector('.c_i-18')?.textContent;
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–Ω
    const zones = htmItem?.querySelector('.c_i-19')?.textContent;
    // –ö–†
    const kr = htmItem?.querySelector('.c_i-20')?.textContent;
    // –ó–∞–Ω—è—Ç–æ—Å—Ç—å
    const employment = htmItem?.querySelector('.c_i-21')?.textContent;
    // –ù–æ–≤—ã–π –í–∏–¥ —Ä–∞–±–æ—Ç
    const taskTypeNew = htmItem?.querySelector('.c_i-22')?.textContent;
    // –ù–æ–≤—ã–π –ø–æ–¥–≤–∏–¥ —Ä–∞–±–æ—Ç
    const subTaskTypeNew = htmItem?.querySelector('.c_i-23')?.textContent;
    // –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
    const isApproved = htmItem?.querySelector('.c_i-24')?.textContent;
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    const isLocked = htmItem?.querySelector('.c_i-25')?.textContent;
    const isLockedElem = htmItem?.querySelector('.c_i-25');
    const lockedID = isLockedElem?.getAttribute('o');
    // –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±—Ä–∏–≥–∞–¥–µ
    const teamList = htmItem?.querySelector('.c_i-26')?.textContent;
    // –ë—Ä–∏–≥–∞–¥–∏—Ä
    const isBrigadier = htmItem?.querySelector('.c_i-27')?.textContent;

    // Method editID
    const editID = htmItem?.querySelector('.c_i-16')?.getAttribute('o');

    const objAllWkk = htmItem?.querySelector('.c_i-0')?.getAttribute('ObjAllwkk');

    if (isLocked !== '') {
      isLockedArray.push(lockedID!);
    }

    // ObjAllWkk

    const jsonObjAllWkk = JSON.parse(objAllWkk!);

    const wkkKeys = Object.keys(jsonObjAllWkk);
    const wkkVals = Object.values(jsonObjAllWkk) as number[];

    const delID = wkkKeys[1];
    const typeID = wkkVals[0]?.toString();

    let startDate = '';
    let startTime = '';
    let endDate = '';
    let endTime = '';

    if (startDateTime) {
      startDate = startDateTime.slice(0, 10);
      startTime = startDateTime.slice(11, 16);
    }
    if (endDateTime) {
      endDate = endDateTime.slice(0, 10);
      endTime = endDateTime.slice(11, 16);
    }

    parentIdDataArr.push({
      [parID as string]: date!,
    });

    const splitDate = date?.split('.') ?? [];
    const convertStart = `${splitDate[2]}-${splitDate[1]}-${splitDate[0]}`;
    const convertStartDate = startDateTime
      ? `${startDate.slice(6, 10)}-${startDate.slice(3, 5)}-${startDate.slice(
          0,
          2,
        )} ${startTime}:00`
      : `${convertStart} 08:00:00`;
    const convertEndDate = `${endDate.slice(6, 10)}-${endDate.slice(
      3,
      5,
    )}-${endDate.slice(0, 2)} ${endTime}:00`;

    if (delID && !method) {
      // –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
      events.push({
        title: shortDescription ?? '',
        start: convertStartDate,
        end: convertEndDate,
        classNames: 'bg-soft-primary',
        allDay: false,
        eventInteractive: true,
        extendedProps: {
          idx,
          jsonObjAllWkk,
          wkkKeys,
          wkkVals,
          delID,
          typeID,
          object: object ?? '',
          taskType: taskType ?? '',
          subTaskType: subTaskType ?? '',
          fullDescription: fullDescription ?? '',
          factTime: factTime ?? '',
          director: director ?? '',
          source: source ?? '',
          notes: notes ?? '',
          location: location ?? '',
          kr: kr ?? '',
          employment: employment ?? '',
          taskTypeNew: taskTypeNew ?? '',
          subTaskTypeNew: subTaskTypeNew ?? '',
          isApproved: isApproved ?? '',
          isLocked: isLocked ?? '',
        }
      });
    } else if (delID && method) {
      eventMethodsArr.push({
        title: shortDescription ?? '',
        start: convertStartDate,
        end: convertEndDate,
        classNames: 'bg-soft-primary',
        allDay: false,
        eventInteractive: true,
        extendedProps: {
          jsonObjAllWkk,
          idx,
          wkkKeys,
          wkkVals,
          delID,
          typeID,
          object: object ?? '',
          taskType: taskType ?? '',
          subTaskType: subTaskType ?? '',
          fullDescription: fullDescription ?? '',
          factTime: factTime ?? '',
          director: director ?? '',
          source: source ?? '',
          notes: notes ?? '',
          location: location ?? '',
          kr: kr ?? '',
          employment: employment ?? '',
          taskTypeNew: taskTypeNew ?? '',
          subTaskTypeNew: subTaskTypeNew ?? '',
          isApproved: isApproved ?? '',
          isLocked: isLocked ?? '',
        },
      });

      methodsArr.push({
        delID,
        method,
        params: { duration: duration ?? '', objQuant: objQuant ?? '', zones: zones ?? '', editID: editID ?? '' },
        teamList: teamList ?? '', 
        isBrigadier: isBrigadier ?? ''
      });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç
  function getLockedDatesArray(parentIDsDatesArr: { [key: string]: string }[], isLockedArr: string[]) {
   
    const lockedDatesArray:string[] = [];

    parentIDsDatesArr.forEach((parentObj) => {
      const key = Object.keys(parentObj)[0];
      if (isLockedArr.includes(key)) {
        lockedDatesArray.push(parentObj[key]);
      }
    });
    console.log("üöÄ ~ getLockedDatesArray ~ lockedDatesArray:", lockedDatesArray)

    return lockedDatesArray;
  }

  let groupedData = methodsArr.reduce((results, item) => {
    results[item.delID] = results[item.delID] || [];
    results[item.delID].push({
      [item.method]: item.params,
    });

    return results;
  }, {} as { [key: string]: any });

  const uniEventsArray = _.uniqBy(eventMethodsArr, 'extendedProps.delID');

  for (let key in groupedData) {
    uniEventsArray.forEach((nEvent) => {
      if (nEvent.extendedProps.delID === key) {
        events.push({ ...nEvent, methods: groupedData[key] });
      }
    });
  }

  // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç
  const lockedDatesArray = getLockedDatesArray(parentIdDataArr, isLockedArray);
  // tempLoader(false);
  return { events, parentIdDataArr, lockedDatesArray };
};
